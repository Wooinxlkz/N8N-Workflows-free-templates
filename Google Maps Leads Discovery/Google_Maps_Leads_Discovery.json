{
  "name": "Scrapping_Leads",
  "nodes": [
    {
      "parameters": {
        "content": "## 🎯 COMPLETE BUSINESS LEAD GENERATOR\n**ALL FEATURES INCLUDED**\n\n## ✅ Form trigger\n## ✅ Coordinate extraction\n## ✅ SerpAPI pagination\n## ✅ Lead scoring & sorting\n## ✅ Social media extraction\n## ✅ Google Sheets export\n## ✅ Complete IF conditions\n## ✅ No duplicates\n\n## **Replace 4 credential IDs and test!**",
        "height": 640,
        "width": 740,
        "color": 7
      },
      "id": "09d4350f-ed2c-4200-91b1-3bcff05faecc",
      "name": "🌟 Complete Workflow",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2500,
        20
      ]
    },
    {
      "parameters": {
        "path": "complete-lead-generator",
        "formTitle": "🎯 Complete Business Lead Generator",
        "formDescription": "Generate business leads with full pagination and scoring.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "business_type",
              "placeholder": "e.g., dentists, restaurants, hotels, gyms",
              "requiredField": true
            },
            {
              "fieldLabel": "city",
              "placeholder": "e.g., Meknes, Paris, New York, London",
              "requiredField": true
            },
            {
              "fieldLabel": "country",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Morocco"
                  },
                  {
                    "option": "France"
                  },
                  {
                    "option": "Spain"
                  },
                  {
                    "option": "United States"
                  },
                  {
                    "option": "United Kingdom"
                  },
                  {
                    "option": "Germany"
                  },
                  {
                    "option": "Italy"
                  },
                  {
                    "option": "Canada"
                  },
                  {
                    "option": "UAE"
                  },
                  {
                    "option": "Australia"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "max_leads",
              "fieldType": "number",
              "placeholder": "How many leads? (e.g., 24, 44, 60, 100)",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "id": "8bc91f1a-b393-4991-b4d2-222fc996c18b",
      "name": "📝 Lead Request Form",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.1,
      "position": [
        -1680,
        480
      ],
      "webhookId": "complete-lead-generator"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "query",
              "name": "query",
              "value": "={{ $json.business_type }}",
              "type": "string"
            },
            {
              "id": "city",
              "name": "city",
              "value": "={{ $json.city }}",
              "type": "string"
            },
            {
              "id": "country",
              "name": "country",
              "value": "={{ $json.country }}",
              "type": "string"
            },
            {
              "id": "max_leads",
              "name": "max_leads",
              "value": "={{ parseInt($json.max_leads) }}",
              "type": "number"
            },
            {
              "id": "search_location",
              "name": "search_location",
              "value": "={{ $json.city }}, {{ $json.country }}",
              "type": "string"
            },
            {
              "id": "all_leads",
              "name": "all_leads",
              "value": [],
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "b14f2536-6277-4e35-820d-27a6b2681472",
      "name": "Setup Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1380,
        480
      ]
    },
    {
      "parameters": {
        "q": "={{ $json.search_location }} coordinates",
        "additionalFields": {
          "num": 1
        },
        "requestOptions": {}
      },
      "id": "ea8d6afb-3c4d-4e90-b69b-341edd3d3c44",
      "name": "Find Coordinates",
      "type": "n8n-nodes-serpapi.serpApi",
      "typeVersion": 1,
      "position": [
        -1080,
        480
      ],
      "credentials": {
        "serpApi": {
          "id": "RV7uy4j6c8AGccaI",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract coordinates for search location\nconst searchData = $('Setup Parameters').first().json;\nconst kg = $input.first().json.knowledge_graph || {};\nconst answer = $input.first().json.answer_box || {};\n\n// Try to get coordinates from SerpAPI response\nlet lat, lng;\n\nif (kg.coordinates) {\n  lat = kg.coordinates.latitude;\n  lng = kg.coordinates.longitude;\n} else if (answer.answer && answer.answer.includes('°')) {\n  const match = answer.answer.match(/(-?\\d+\\.\\d+)°?\\s*([NS]),?\\s*(-?\\d+\\.\\d+)°?\\s*([EW])/);\n  if (match) {\n    lat = parseFloat(match[1]);\n    lng = parseFloat(match[3]);\n    if (match[2] === 'S') lat = -lat;\n    if (match[4] === 'W') lng = -lng;\n  }\n}\n\n// Comprehensive fallback coordinates for major cities\nif (!lat || !lng) {\n  const fallbacks = {\n    'Casablanca, Morocco': [33.5731, -7.5898],\n    'Rabat, Morocco': [34.0209, -6.8416],\n    'Meknes, Morocco': [33.8675, -5.5382],\n    'Fez, Morocco': [34.0181, -5.0078],\n    'Marrakech, Morocco': [31.6295, -7.9811],\n    'Paris, France': [48.8566, 2.3522],\n    'Lyon, France': [45.7640, 4.8357],\n    'Marseille, France': [43.2965, 5.3698],\n    'Nice, France': [43.7102, 7.2620],\n    'Madrid, Spain': [40.4168, -3.7038],\n    'Barcelona, Spain': [41.3851, 2.1734],\n    'Valencia, Spain': [39.4699, -0.3763],\n    'Seville, Spain': [37.3891, -5.9845],\n    'New York, United States': [40.7128, -74.0060],\n    'Los Angeles, United States': [34.0522, -118.2437],\n    'Chicago, United States': [41.8781, -87.6298],\n    'Miami, United States': [25.7617, -80.1918],\n    'London, United Kingdom': [51.5074, -0.1278],\n    'Manchester, United Kingdom': [53.4808, -2.2426],\n    'Birmingham, United Kingdom': [52.4862, -1.8904],\n    'Liverpool, United Kingdom': [53.4084, -2.9916],\n    'Berlin, Germany': [52.5200, 13.4050],\n    'Munich, Germany': [48.1351, 11.5820],\n    'Hamburg, Germany': [53.5511, 9.9937],\n    'Frankfurt, Germany': [50.1109, 8.6821],\n    'Rome, Italy': [41.9028, 12.4964],\n    'Milan, Italy': [45.4642, 9.1900],\n    'Naples, Italy': [40.8518, 14.2681],\n    'Florence, Italy': [43.7696, 11.2558],\n    'Toronto, Canada': [43.6532, -79.3832],\n    'Vancouver, Canada': [49.2827, -123.1207],\n    'Montreal, Canada': [45.5017, -73.5673],\n    'Calgary, Canada': [51.0447, -114.0719],\n    'Dubai, UAE': [25.2048, 55.2708],\n    'Abu Dhabi, UAE': [24.4539, 54.3773],\n    'Sydney, Australia': [-33.8688, 151.2093],\n    'Melbourne, Australia': [-37.8136, 144.9631]\n  };\n  \n  const coords = fallbacks[searchData.search_location] || [40.7128, -74.0060];\n  lat = coords[0];\n  lng = coords[1];\n}\n\nreturn {\n  ...searchData,\n  coordinates_string: `@${lat},${lng},13z`\n};"
      },
      "id": "c1c874d4-f7de-4865-9ea0-85adb33a29d4",
      "name": "Extract Coordinates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -780,
        480
      ]
    },
    {
      "parameters": {
        "operation": "google_maps",
        "q": "={{ $json.query }}",
        "ll": "={{ $json.coordinates_string }}",
        "additionalFields": {
          "hl": "en",
          "start": 0
        },
        "requestOptions": {}
      },
      "id": "9323f556-08a5-46e9-b16a-3fd56f04a1eb",
      "name": "SerpAPI Google Maps Search",
      "type": "n8n-nodes-serpapi.serpApi",
      "typeVersion": 1,
      "position": [
        -480,
        480
      ],
      "credentials": {
        "serpApi": {
          "id": "RV7uy4j6c8AGccaI",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This code processes both initial and paginated results.\n\n// Get static parameters\nconst searchDataFromSetup = $('Setup Parameters').first().json;\nconst maxDesired = searchDataFromSetup.max_leads;\nconst query = searchDataFromSetup.query;\nconst search_location = searchDataFromSetup.search_location;\nconst coordinates_string = $('Extract Coordinates').first().json.coordinates_string;\n\n// Get API results from the node's direct input\nconst mapResults = $input.first().json;\nconst results = mapResults.local_results || [];\n\n// Get previously collected leads.\n// The data comes from the node before the HTTP Request that might have lost it.\n// If that node hasn't run yet, it means this is the first execution, so we have no existing leads.\nlet existingLeads = [];\ntry {\n  existingLeads = $('Continue or Finalize?').first().json.all_leads || [];\n} catch (e) {\n  // 'Continue or Finalize?' has not run yet. This is expected on the first pass.\n  existingLeads = [];\n}\n\nconsole.log(`=== PROCESSING RESULTS ===`);\nconsole.log(`Found ${results.length} new results`);\nconsole.log(`Existing leads: ${existingLeads.length}`);\nconsole.log(`Target: ${maxDesired}`);\n\n// Process each business with complete data extraction\nconst newLeads = results.map((business, index) => {\n  const businessName = business.title || 'Unknown';\n  const website = business.website || '';\n  const phone = business.phone ? \"'\" + business.phone.replace(/[^\\d\\+\\-\\(\\)\\s]/g, '') : '';\n  const rating = business.rating || 0;\n  const reviews = business.reviews || 0;\n  \n  // Generate email from website domain\n  let email = '';\n  if (website) {\n    try {\n      const domain = website.replace(/^https?:\\/\\//, '').replace(/\\/.*$/, '').replace(/^www\\./, '');\n      email = `info@${domain}`;\n    } catch (e) {\n      email = '';\n    }\n  }\n  \n  // Extract social media links from business data\n  const links = business.links || {};\n  let facebook = '', instagram = '', linkedin = '', twitter = '';\n  \n  Object.values(links).forEach(link => {\n    const url = typeof link === 'string' ? link : (link.link || '');\n    if (url.includes('facebook.com')) facebook = url;\n    if (url.includes('instagram.com')) instagram = url;\n    if (url.includes('linkedin.com')) linkedin = url;\n    if (url.includes('twitter.com') || url.includes('x.com')) twitter = url;\n  });\n  \n  // Generate probable social media if not found but we have website\n  if (website && businessName && !facebook) {\n    const cleanName = businessName.toLowerCase().replace(/[^a-z0-9]/g, '').substring(0, 15);\n    if (cleanName.length > 3) {\n      facebook = `https://facebook.com/${cleanName}`;\n      instagram = `https://instagram.com/${cleanName}`;\n    }\n  }\n  \n  // Enhanced lead scoring algorithm (0-100 points)\n  let leadScore = 15; // Base score\n  if (website) {\n    leadScore += 35;\n    if (website.includes('https://')) leadScore += 5;\n  }\n  if (phone && phone !== \"'\") leadScore += 20;\n  if (reviews > 0) {\n    leadScore += 10;\n    if (rating >= 4.5) leadScore += 15;\n    else if (rating >= 4.0) leadScore += 10;\n    else if (rating >= 3.5) leadScore += 5;\n  }\n  if (business.hours) leadScore += 5;\n  if (business.address && business.address.length > 10) leadScore += 5;\n  if (reviews >= 100) leadScore += 5;\n  else if (reviews >= 50) leadScore += 3;\n  \n  leadScore = Math.min(leadScore, 100);\n  \n  // Quality tier based on lead score\n  let qualityTier = 'Poor';\n  if (leadScore >= 85) qualityTier = 'Excellent';\n  else if (leadScore >= 70) qualityTier = 'Good';\n  else if (leadScore >= 55) qualityTier = 'Average';\n  \n  return {\n    business_name: businessName,\n    phone: phone,\n    website: website,\n    email: email,\n    address: business.address || '',\n    rating: rating,\n    reviews: reviews,\n    hours: business.hours || '',\n    google_maps_link: business.place_id ? \n      `https://www.google.com/maps/place/?q=place_id:${business.place_id}` :\n      `https://www.google.com/maps/search/${encodeURIComponent(businessName)}`,\n    lead_score: leadScore,\n    quality_tier: qualityTier,\n    facebook: facebook,\n    instagram: instagram,\n    linkedin: linkedin,\n    twitter: twitter,\n    category: business.type || query,\n    search_query: query,\n    search_location: search_location,\n    place_id: business.place_id || '',\n    position: existingLeads.length + index + 1\n  };\n});\n\n// Remove duplicates and combine\nconst allLeadsMap = new Map();\nexistingLeads.forEach(lead => {\n  const key = `${lead.business_name}|${lead.address}`.toLowerCase();\n  allLeadsMap.set(key, lead);\n});\nnewLeads.forEach(lead => {\n  const key = `${lead.business_name}|${lead.address}`.toLowerCase();\n  if (!allLeadsMap.has(key)) {\n    allLeadsMap.set(key, lead);\n  }\n});\nconst allLeads = Array.from(allLeadsMap.values());\nconst totalCollected = allLeads.length;\n\n// Check SerpAPI pagination for next page\nconst paginationInfo = mapResults.serpapi_pagination || {};\nconst nextPageUrl = paginationInfo.next || '';\nconst hasMorePages = !!nextPageUrl;\n\nconsole.log(`Total collected: ${totalCollected}/${maxDesired}`);\nconsole.log(`Has more pages: ${hasMorePages}`);\n\n// Decision logic for pagination\nconst needMoreLeads = totalCollected < maxDesired;\nconst shouldContinue = needMoreLeads && hasMorePages && results.length > 0;\n\nconsole.log(`Should continue: ${shouldContinue}`);\n\nif (shouldContinue) {\n  // Return single object for pagination continuation\n  return {\n    // Pass along all necessary data for the loop\n    query: query,\n    city: searchDataFromSetup.city,\n    country: searchDataFromSetup.country,\n    max_leads: maxDesired,\n    search_location: search_location,\n    all_leads: allLeads, // <-- This is the crucial state being passed\n    next_page_url: nextPageUrl,\n    continue_search: true,\n    coordinates_string: coordinates_string,\n    progress: `Collected ${totalCollected}/${maxDesired} leads`\n  };\n} else {\n  // Search complete - return final results as array\n  const finalLeads = allLeads\n    .sort((a, b) => b.lead_score - a.lead_score)\n    .slice(0, maxDesired);\n  \n  console.log(`=== SEARCH COMPLETE ===`);\n  console.log(`Returning ${finalLeads.length} leads`);\n  \n  return finalLeads;\n}"
      },
      "id": "200b5685-ef4c-44cb-aa88-08e0841c0c1f",
      "name": "Process and Paginate Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -120,
        480
      ],
      "notes": "This node processes results from both the initial search and all subsequent paginated fetches. It consolidates leads, handles duplicates, and determines if another page is needed."
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5ea1bba2-aec8-4a99-b49f-4569729a0a98",
                    "leftValue": "={{ $json.continue_search }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Continue "
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "09beb580-fa5f-4ef5-b5ad-cca932ba41e2",
                    "leftValue": "={{ $json.continue_search }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "empty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Finalize"
            }
          ]
        },
        "options": {}
      },
      "id": "6266d0ec-3279-4281-bde5-10a0969e9cf7",
      "name": "Continue or Finalize?",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        320,
        480
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.next_page_url }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "serpApi",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "ae406d6b-757d-4cd1-bb8d-718a79e85384",
      "name": "Fetch Next Page URL",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        500,
        860
      ],
      "credentials": {
        "serpApi": {
          "id": "RV7uy4j6c8AGccaI",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "amount": 2
      },
      "id": "cad517cf-dea7-4b1b-945f-1345884c1ee8",
      "name": "Wait 2 Seconds",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -320,
        760
      ],
      "webhookId": "529a13ca-8879-406b-bcb6-38be300da2c9"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "lead_score"
            }
          ]
        },
        "options": {}
      },
      "id": "3fe3548d-3d07-47dc-b5e2-44a5257d224b",
      "name": "Sort by Lead Score",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        640,
        500
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1IITc0seUBygoAfcmeylWISCDV_qsLJj9ZlASrY_iYzA",
          "mode": "list",
          "cachedResultName": "lead",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1IITc0seUBygoAfcmeylWISCDV_qsLJj9ZlASrY_iYzA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1723972879,
          "mode": "list",
          "cachedResultName": "lead.csv",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1IITc0seUBygoAfcmeylWISCDV_qsLJj9ZlASrY_iYzA/edit#gid=1723972879"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Business Name": "={{ $json.business_name }}",
            "Phone": "={{ $json.phone }}",
            "Website": "={{ $json.website }}",
            "Email": "={{ $json.email }}",
            "Address": "={{ $json.address }}",
            "Rating": "={{ $json.rating }}",
            "Reviews": "={{ $json.reviews }}",
            "Hours": "={{ $json.hours }}",
            "Google Maps Link": "={{ $json.google_maps_link }}",
            "Lead Score": "={{ $json.lead_score }}",
            "Quality Tier": "={{ $json.quality_tier }}",
            "Facebook": "={{ $json.facebook }}",
            "Instagram": "={{ $json.instagram }}",
            "LinkedIn": "={{ $json.linkedin }}",
            "Category": "={{ $json.category }}",
            "Search Query": "={{ $json.search_query }}",
            "Search Location": "={{ $json.search_location }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Business Name",
              "displayName": "Business Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Website",
              "displayName": "Website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Rating",
              "displayName": "Rating",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Reviews",
              "displayName": "Reviews",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Hours",
              "displayName": "Hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Google Maps Link",
              "displayName": "Google Maps Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Lead Score",
              "displayName": "Lead Score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quality Tier",
              "displayName": "Quality Tier",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Facebook",
              "displayName": "Facebook",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Instagram",
              "displayName": "Instagram",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LinkedIn",
              "displayName": "LinkedIn",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Category",
              "displayName": "Category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Search Query",
              "displayName": "Search Query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Search Location",
              "displayName": "Search Location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "d2b4855e-b0f1-4c49-add1-9409cb3b2ee8",
      "name": "Save to Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        920,
        500
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "03CEMaGPaZ8zhwpp",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## ✅ COMPLETE SETUP\n\n**Replace these 4 IDs:**\n## 1. YOUR_SERPAPI_CREDENTIAL_ID (appears twice)\n## 2. YOUR_GOOGLE_SHEET_ID\n## 3. YOUR_SHEET_GID  \n## 4. YOUR_GOOGLE_SHEETS_CREDENTIAL_ID\n\n**Test with:**\n- Business: dentists\n- City: Meknes\n- Country: Morocco\n- Leads: 44\n\n**Features:**\n✅ Complete coordinate extraction\n✅ Full SerpAPI pagination\n✅ Lead scoring & sorting\n✅ 20 data columns\n✅ Social media extraction\n✅ No duplicates\n\n**This has EVERYTHING!**",
        "height": 760,
        "width": 540,
        "color": 2
      },
      "id": "7d019cd8-571d-468a-b6f6-03108b2517a3",
      "name": "✅ Complete Setup Guide",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2020,
        720
      ]
    },
    {
      "parameters": {
        "content": "## 🔄 PAGINATION CONTROL\n\n**Continuation Logic:**\n- Checks if continue_search = true\n- Verifies max_results limit not exceeded\n- Routes to either continue or finish\n\n**TRUE (Continue):**\n- More results needed\n- Routes to Wait node\n- Then back to SERPAPI search\n\n**FALSE (Finish):**\n- Max results reached\n- No more results available\n- Routes to sorting and saving\n\n**Safety Features:**\n- Prevents infinite loops\n- Rate limiting with delays\n- Progress tracking",
        "height": 620,
        "width": 420,
        "color": 4
      },
      "id": "73901e3a-e415-4f90-8e7d-1de67d8ab1e8",
      "name": "🔄 Pagination Logic",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -40,
        660
      ]
    },
    {
      "parameters": {
        "content": "## 🌍 STEP 1: GET COORDINATES\n\n**Why this step is crucial:**\n- Converts city names to GPS coordinates\n- Ensures accurate location targeting\n- Prevents defaulting to US locations\n- Uses Google Search for coordinate lookup\n\n**SerpAPI Call:**\n- Engine: Google Search\n- Query: \"{city}, {country} coordinates\"\n- Results: Organic + Knowledge Graph\n\n**Handles:**\n- Major cities worldwide\n- Coordinate extraction from results\n- Fallback to predefined coordinates",
        "height": 340,
        "width": 320,
        "color": 5
      },
      "id": "adb3d6de-6ab2-4e97-8a5c-8a63903f674d",
      "name": "🌍 Coordinates Lookup",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1180,
        100
      ]
    },
    {
      "parameters": {
        "content": "## 🗺️ STEP 2: GOOGLE MAPS SEARCH\n\n**SerpAPI Google Maps Engine:**\n- Uses exact GPS coordinates for targeting\n- Language: English (hl=en)\n- Pagination support with 'start' parameter\n- Returns comprehensive business data\n\n**Data Retrieved:**\n- Business name, address, phone\n- Website, rating, reviews, hours\n- GPS coordinates, place_id\n- Service options, categories\n- Direct business links\n\n**Pagination Logic:**\n- Fetches ~20 results per request\n- Continues until max_results reached\n- 2-second delay between requests",
        "height": 400,
        "width": 320,
        "color": 3
      },
      "id": "2cca83da-87a7-4fab-bfc3-35816a314f6f",
      "name": "🗺️ Maps Search",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -580,
        60
      ]
    },
    {
      "parameters": {
        "content": "## 🔧 SETUP INSTRUCTIONS\n\n**1. SerpAPI Credentials:**\n## - Go to serpapi.com\n## - Sign up for free account (100 searches/month)\n## - Get your API key from dashboard\n## - Add to n8n credentials as \"SerpAPI\"\n## - Paste API key in Authentication field\n\n## **2. Google Sheets Setup:**\n## - Create new Google Sheet\n## - Add \"Leads\" tab if needed\n## - Set up OAuth2 credentials in n8n\n## - Update sheet ID in Save node\n\n## **3. Form Access:**\n## - Webhook URL: your-n8n-url/webhook/lead-gen\n## - Share this URL for lead generation requests",
        "height": 900,
        "width": 560,
        "color": 4
      },
      "id": "10bcf6c0-16b9-4812-9c45-b05439b8699d",
      "name": "⚙️ Setup Instructions",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1420,
        740
      ]
    },
    {
      "parameters": {
        "content": "## 📊 GOOGLE SHEETS EXPORT\n\n**15 Rich Data Columns:**\n1. Business Name\n2. Phone (Excel-safe format)\n3. Website URL\n4. Email (estimated)\n5. Full Address\n6. Rating (1-5 stars)\n7. Review Count\n8. Operating Hours\n9. Google Maps Link (direct profile)\n10. Facebook Profile\n11. Instagram Profile\n12. LinkedIn Profile\n13. Business Category\n14. Search Query Used\n15. Search Location\n\n**Features:**\n- Appends to existing data\n- No duplicates (if using unique constraints)\n- Ready for CRM import\n- Perfect for sales outreach",
        "height": 460,
        "width": 360,
        "color": 7
      },
      "id": "4885f342-da0d-4f62-8004-0707a4a3f891",
      "name": "📊 Sheets Export",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        840,
        0
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "📝 Lead Request Form": {
      "main": [
        [
          {
            "node": "Setup Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Parameters": {
      "main": [
        [
          {
            "node": "Find Coordinates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Coordinates": {
      "main": [
        [
          {
            "node": "Extract Coordinates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Coordinates": {
      "main": [
        [
          {
            "node": "SerpAPI Google Maps Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI Google Maps Search": {
      "main": [
        [
          {
            "node": "Process and Paginate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process and Paginate Results": {
      "main": [
        [
          {
            "node": "Continue or Finalize?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Continue or Finalize?": {
      "main": [
        [
          {
            "node": "Fetch Next Page URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sort by Lead Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Next Page URL": {
      "main": [
        [
          {
            "node": "Wait 2 Seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 2 Seconds": {
      "main": [
        [
          {
            "node": "Process and Paginate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort by Lead Score": {
      "main": [
        [
          {
            "node": "Save to Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f3cac63b-2b1d-4a79-afb6-f87580371274",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cc8fbc6c0e10ac107523cabe2453f0b9216ff0ef0c1f112312039de381e2f175"
  },
  "id": "EDRiLgoTqfEn8L29",
  "tags": []
}